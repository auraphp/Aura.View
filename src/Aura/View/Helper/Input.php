<?php
/**
 * 
 * This file is part of the Aura Project for PHP.
 * 
 * @package Aura.View
 * 
 * @license http://opensource.org/licenses/bsd-license.php BSD
 * 
 */
namespace Aura\View\Helper;

/**
 * 
 * Helper for an `<input>` tag, optionally wrapped in a `<label>` tag.
 * 
 * Supported types:
 * 
 *     button                  clickable button
 *     checkbox                checkbox
 *     color                   color picker
 *     date                    date control (year, month and day)
 *     datetime                date and time control (year, month, day, hour, minute, second, and fraction of a second, UTC time zone)
 *     datetime-local          date and time control (year, month, day, hour, minute, second, and fraction of a second, no time zone)
 *     email                   e-mail address
 *     file                    file-select field and a "Browse..." button for file uploads
 *     hidden                  hidden input field
 *     image                   image as the submit button
 *     month                   month and year control (no time zone)
 *     number                  field for entering a number
 *     password                password field
 *     radio                   radio button
 *     range                   control for entering a number whose exact value is not important (like a slider control)
 *     reset                   reset button (resets all form values to default values)
 *     search                  text field for entering a search string
 *     submit                  submit button
 *     tel                     telephone number
 *     text                    (default) single-line text field
 *     time                    time control (no time zone)
 *     url                     URL field
 *     week                    week and year control (no time zone)
 * 
 * @package Aura.View
 * 
 */
class Input extends AbstractHelper
{
    /**
     * 
     * Attributes for the input tag.
     * 
     * @var array
     * 
     */
    protected $attribs = [];
    
    /**
     * 
     * The field value for the input element. This may overwrite the 'value'
     * attribute, or may be used to see if the 'checked' attribute should be
     * set, depending on the input type.
     * 
     * @var mixed
     * 
     */
    protected $value;
    
    /**
     * 
     * Text for the label.
     * 
     * @var string
     * 
     */
    protected $label;
    
    /**
     * 
     * Attributes for the label.
     * 
     * @var array
     * 
     */
    protected $label_attribs = [];
    
    /**
     * 
     * The HTML generated by this helper.
     * 
     * @var string
     * 
     */
    protected $html = '';
    
    /**
     * 
     * Returns an `<input>` tag, optionally wrapped in a `<label>` tag.
     * 
     * @param array $attribs Attributes for the input tag.
     * 
     * @param mixed $value The field value for the input element. This may 
     * overwrite the 'value' attribute, or may be used to see if the 'checked'
     * attribute should be set, depending on the input type.
     * 
     * @return string
     * 
     */
    public function __invoke(
        $attribs,
        $value = null,
        $label = null,
        $label_attribs = []
    ) {
        // set properties
        $this->html          = '';
        $this->attribs       = $attribs;
        $this->value         = $value;
        $this->label         = $label;
        $this->label_attribs = $label_attribs;
        
        // build the html and return it
        $this->buildInput();
        $this->buildLabel();
        return $this->html;
    }
    
    protected function buildInput()
    {
        // determine a modifier method based on the input type
        $method = strtolower($this->attribs['type']);
        
        // remove dashes
        $method = str_replace('-', '', $method);
        
        // modify attributes according to input type
        if (method_exists($this, $method)) {
            $this->$method();
        }
        
        // get attributes and build the input tag html
        $this->html = $this->void('input', $this->attribs);
    }
    
    protected function buildLabel()
    {
        if (! $this->label) {
            return;
        }
        
        if (isset($this->attribs['id'])) {
            $this->label_attribs['for'] = $this->attribs['id'];
        }
        
        $attr = $this->attribs($this->label_attribs);
        if ($attr) {
            $this->html = "<label {$attr}>{$this->html} {$this->label}</label>";
        } else {
            $this->html = "<label>{$this->html} {$this->label}</label>";
        }
    }
    
    protected function setCheckedAttrib()
    {
        if (isset($this->attribs['value']) && $this->value == $this->attribs['value']) {
            $this->attribs['checked'] = 'checked';
        } else {
            $this->attribs['checked'] = null;
        }
    }
    
    protected function setValueAttrib()
    {
        // only overwrite if not null
        if ($this->value !== null) {
            $this->attribs['value'] = (string) $this->value;
        }
    }

    protected function button()
    {
        // do nothing
    }
    
    protected function checkbox()
    {
        $this->setCheckedAttrib();
    }
    
    protected function color()
    {
        $this->setValueAttrib();
    }
    
    protected function date()
    {
        $this->setValueAttrib();
    }
    
    protected function datetime()
    {
        $this->setValueAttrib();
    }
    
    protected function datetimelocal()
    {
        $this->setValueAttrib();
    }
    
    protected function email()
    {
        $this->setValueAttrib();
    }
    
    protected function file()
    {
        // do nothing
    }
    
    protected function hidden()
    {
        $this->setValueAttrib();
    }
    
    protected function image()
    {
        // do nothing
    }
    
    protected function month()
    {
        $this->setValueAttrib();
    }
    
    protected function number()
    {
        $this->setValueAttrib();
    }
    
    protected function password()
    {
        $this->setValueAttrib();
    }
    
    protected function radio()
    {
        $this->setCheckedAttrib();
    }
    
    protected function range()
    {
        $this->setValueAttrib();
    }
    
    protected function reset()
    {
        // do nothing
    }
    
    protected function search()
    {
        $this->setValueAttrib();
    }
    
    protected function submit()
    {
        // do nothing
    }
    
    protected function tel()
    {
        $this->setValueAttrib();
    }
    
    protected function text()
    {
        $this->setValueAttrib();
    }
    
    protected function time()
    {
        $this->setValueAttrib();
    }
    
    protected function url()
    {
        $this->setValueAttrib();
    }
    
    protected function week()
    {
        $this->setValueAttrib();
    }
    
}
